{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/global/window.js","src/js/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","videojsSpeakDescriptionsTrack","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","win","_interopDefault","ex","_typeof","videojs","extendedPlayerState","unknown","initialized","playing","paused","playingExtended","pausedExtended","SpeakDescriptionsTrackTTS","player","_classCallCheck","player_","extendedPlayerState_","isDucked","speechSynthesis","cancel","resume","speaking","pause","tracks","textTracks","descriptionsTrack","track","mode","kind","speakActiveCues","SpeechSynthesisUtterance","textToSpeak","startTime","Infinity","endTime","ct","currentTime","activeCues","push","text","Math","min","max","join","replace","log","descriptionExtended","tech_","warn","ssu","lang","increaseLanguageLocalization","language","rate","pitch","volume","onstart","bind","onend","delta","Date","now","startDate","toFixed","play","onerror","speak","playerLanguage","navigatorLanguage","navigator","toLowerCase","indexOf","speakDescriptionsTrack","tech","speakDescriptionsTTS","on","textTrackChange","dispose","setSource","srcObj","next","setTech","newTech","off","handleTechPause_","event","duration","dur","setCurrentTime","vol","setVolume","callPlay","middleware","TERMINATOR","callPause","use","VERSION"],"mappings":"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","file":"/Users/owen/Dropbox/ICTAS/Projects/videojs-speak-descriptions-track/dist/browser/videojs-speak-descriptions-track.min.js","sourceRoot":"","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar videojs = _interopDefault(require('video.js'));\nvar window = _interopDefault(require('global/window'));\n\n/**\n * Player status for extended descriptions (playback of descriptions while pausing the tech)\n *\n * @typedef extendedPlayerState\n * @enum\n */\nconst extendedPlayerState = {\n  unknown: 'unknown',\n  initialized: 'initialized',\n  playing: 'playing',\n  paused: 'paused',\n  playingExtended: 'playingExtended',\n  pausedExtended: 'pausedExtended'\n};\n\n// TODO: user control over this attribute?\nconst audioDuckingFactor = 0.25;\n\n/**\n * The SpeakDescriptionsTrackTTS component\n */\nclass SpeakDescriptionsTrackTTS {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   */\n  constructor(player) {\n    this.player_ = player;\n    this.extendedPlayerState_ = extendedPlayerState.initialized;\n    this.isDucked = false;\n\n    if (window.speechSynthesis) {\n      window.speechSynthesis.cancel();\n    }\n  }\n\n  /**\n   * Dispose of the `SpeakDescriptionsTrackTTS`\n   */\n  dispose() {\n  }\n\n  play() {\n    const speechSynthesis = window.speechSynthesis;\n\n    if (speechSynthesis.paused) {\n      speechSynthesis.resume();\n    }\n  }\n\n  pause() {\n    const speechSynthesis = window.speechSynthesis;\n\n    if (speechSynthesis.speaking) {\n      speechSynthesis.pause();\n    }\n  }\n\n  paused() {\n    return (\n      this.extendedPlayerState_ === extendedPlayerState.paused ||\n      this.extendedPlayerState_ === extendedPlayerState.pausedExtended\n    );\n  }\n\n  textTrackChange() {\n    const tracks = this.player_.textTracks();\n    let descriptionsTrack = null;\n    let i = tracks.length;\n\n    while (i--) {\n      const track = tracks[i];\n\n      if (track.mode === 'showing') {\n        if (track.kind === 'descriptions') {\n          descriptionsTrack = track;\n        }\n      }\n    }\n\n    if (descriptionsTrack) {\n      this.speakActiveCues(descriptionsTrack);\n    }\n  }\n\n  /**\n   * Use browser Speech Synthesis (aka TTS) to speak active cues, if supported\n   *\n   * @param {TextTrackObject} track Texttrack object to speak\n   * @method speakActiveCues\n   */\n  speakActiveCues(track) {\n    if (!window.SpeechSynthesisUtterance || !window.speechSynthesis) {\n      return;\n    }\n\n    const speechSynthesis = window.speechSynthesis;\n\n    let textToSpeak = [];\n    let startTime = Infinity;\n    let endTime = -Infinity;\n    const ct = this.player_.currentTime();\n\n    if (track.activeCues) {\n      // TODO: Need to handle this logic better; it's possible that a new cue\n      //       started while another is still active. We don't handle that correctly.\n      for (let i = 0; i < track.activeCues.length; i++) {\n        textToSpeak.push(track.activeCues[i].text);\n        startTime = Math.min(track.activeCues[i].startTime, startTime);\n        endTime = Math.max(track.activeCues[i].endTime, endTime);\n      }\n      // TODO: handle any HTML markup in the cues properly; for now,\n      //       we just strip out HTML markup.\n      textToSpeak = textToSpeak.join('\\r\\n').replace(/<(?:.|\\n)*?>/gm, '');\n    }\n\n    if (textToSpeak) {\n      if (speechSynthesis.speaking) {\n        // TODO: Handle description cue collision\n        videojs.log.warn(`Speech synthesis collision (${textToSpeak} - ${this.ssu.text}) : ${ct} : ${this.startTime} : ${this.endTime}`);\n\n        speechSynthesis.cancel();\n\n      } else if (speechSynthesis.paused) {\n        // TODO: Handle if speech synthesis is paused here\n        videojs.log.warn(`Speech synthesis collision (paused) (${textToSpeak} - ${this.ssu.text}) : ${ct} : ${this.startTime} : ${this.endTime}`);\n\n        speechSynthesis.cancel();\n        speechSynthesis.resume();\n      }\n\n      // Store info about the current cue for debugging and/or logging\n      this.startTime = startTime;\n      this.endTime = endTime;\n\n      // TODO: Need to dispose of this ssu after it is finished?\n      this.ssu = new window.SpeechSynthesisUtterance();\n\n      this.ssu.text = textToSpeak;\n      this.ssu.lang = this.increaseLanguageLocalization(track.language);\n\n      // TODO: user control over these attributes\n      this.ssu.rate = 1.1;\n      this.ssu.pitch = 1.0;\n      this.ssu.volume = 1.0;\n\n      // TODO: This audio ducking needs to be made more robust\n      this.ssu.onstart = function(e) {\n        // Duck the player's audio\n        if (!this.isDucked) {\n          this.isDucked = true;\n          this.player_.tech_.volume(this.player_.tech_.volume() * audioDuckingFactor);\n        }\n      }.bind(this);\n      this.ssu.onend = function(e) {\n        // Speech synthesis of a cue has ended\n\n        const delta = (Date.now() - this.ssu.startDate) / 1000;\n\n        videojs.log(`SpeakDescriptionsTrackTTS of cue: ${this.startTime} : ${this.endTime} : ${this.endTime - this.startTime} : ${delta} : ${(delta * 100.0 / (this.endTime - this.startTime)).toFixed(1)}%`);\n\n        // Un-duck the player's audio\n        if (this.isDucked) {\n          this.isDucked = false;\n          this.player_.tech_.volume(this.player_.tech_.volume() / audioDuckingFactor);\n        }\n\n        if (this.extendedPlayerState_ === extendedPlayerState.playingExtended) {\n          videojs.log('Un-pausing playback');\n          this.extendedPlayerState_ = extendedPlayerState.playing;\n          this.player_.tech_.play();\n          this.descriptionExtended = false;\n        }\n      }.bind(this);\n      this.ssu.onerror = function(e) {\n        // An error occured during speech synthesis\n\n        const delta = (Date.now() - this.ssu.startDate) / 1000;\n\n        videojs.log.warn(`SSU error (${this.ssu.text})`);\n        videojs.log.warn(`SpeakDescriptionsTrackTTS of cue: ${this.startTime} : ${this.endTime} : ${this.endTime - this.startTime} : ${delta} : ${(delta * 100.0 / (this.endTime - this.startTime)).toFixed(1)}%`);\n\n        // Un-duck the player's audio\n        if (this.isDucked) {\n          this.isDucked = true;\n          this.player_.tech_.volume(this.player_.tech_.volume() / audioDuckingFactor);\n        }\n\n        if (this.extendedPlayerState_ === extendedPlayerState.playingExtended) {\n          videojs.log('Un-pausing playback');\n          this.extendedPlayerState_ = extendedPlayerState.playing;\n          this.player_.tech_.play();\n          this.descriptionExtended = false;\n        }\n      }.bind(this);\n\n      // Start speaking the new textToSpeak\n\n      this.ssu.startDate = Date.now();\n      speechSynthesis.speak(this.ssu);\n\n    } else {\n      // No current textToSpeak, so a cue's display time has ended.\n\n      if (speechSynthesis.speaking) {\n        // Speech synthesis is still speaking - handle description cue overrun\n        videojs.log('Pausing playback');\n\n        this.extendedPlayerState_ = extendedPlayerState.playingExtended;\n        this.descriptionExtended = true;\n        this.player_.tech_.pause();\n\n      } else if (speechSynthesis.paused) {\n        // TODO: Handle if speech synthesis is paused here\n        videojs.log.warn(`Speech synthesis overrun (paused) (${this.ssu.text}) : ${this.startTime} : ${this.endTime}`);\n\n        speechSynthesis.cancel();\n        speechSynthesis.resume();\n\n   // } else if (this.ssu) {\n     // videojs.log(`Speech had ended before end of cue (${this.ssu.text}) : ${this.startTime} : ${this.endTime} : ${ct}`);\n\n      }\n\n      return;\n    }\n  }\n\n  /**\n   * Try to improve the localization of the text track language, using\n   *  the player's language setting and the browser's language setting.\n   *  e.g. if lang='en' and language = 'en-US', use the more specific\n   *  localization of language.\n   *\n   * @param {string} lang the lang attribute to try to improve\n   * @return {string} the improved lang attribute\n   * @method increaseLanguageLocalization\n   */\n  increaseLanguageLocalization(lang) {\n    const playerLanguage = this.player_.language && this.player_.language();\n    const navigatorLanguage = window.navigator && window.navigator.language;\n\n    if (\n      lang &&\n      (typeof lang === 'string') &&\n      (typeof playerLanguage === 'string') &&\n      (playerLanguage.length > lang.length) &&\n      (playerLanguage.toLowerCase().indexOf(lang.toLowerCase()) === 0)\n    ) {\n\n      lang = playerLanguage;\n    }\n\n    if (\n      lang &&\n      (typeof lang === 'string') &&\n      (typeof navigatorLanguage === 'string') &&\n      (navigatorLanguage.length > lang.length) &&\n      (navigatorLanguage.toLowerCase().indexOf(lang.toLowerCase()) === 0)\n    ) {\n\n      lang = navigatorLanguage;\n    }\n\n    return lang;\n  }\n}\n\nconst speakDescriptionsTrack = function(player) {\n  let tech;\n\n  player.speakDescriptionsTTS = new SpeakDescriptionsTrackTTS(player);\n  player.on('texttrackchange', player.speakDescriptionsTTS.textTrackChange.bind(player.speakDescriptionsTTS));\n  player.on('dispose', player.speakDescriptionsTTS.dispose.bind(player.speakDescriptionsTTS));\n\n  return {\n    setSource(srcObj, next) {\n      next(null, srcObj);\n    },\n\n    setTech(newTech) {\n      tech = newTech;\n\n      player.off(tech, 'pause', player.handleTechPause_);\n\n      tech.on('pause', (event) => {\n        if (player.speakDescriptionsTTS && player.speakDescriptionsTTS.extendedPlayerState_) {\n          if (player.speakDescriptionsTTS.extendedPlayerState_ !== extendedPlayerState.playingExtended) {\n            player.handleTechPause_();\n          }\n        }\n      });\n    },\n\n    // TODO: Eventually we may modify the duration and/or current time to allow\n    //       for the time that the video is paused for extended description.\n    //       For now, we just treat it as though the video stalled while streaming.\n    duration(dur) {\n      return dur;\n    },\n\n    currentTime(ct) {\n      return ct;\n    },\n\n    setCurrentTime(ct) {\n      return ct;\n    },\n\n    volume(vol) {\n      if (player.speakDescriptionsTTS && player.speakDescriptionsTTS.isDucked) {\n        return vol / audioDuckingFactor;\n      }\n\n      return vol;\n    },\n\n    setVolume(vol) {\n      if (player.speakDescriptionsTTS && player.speakDescriptionsTTS.isDucked) {\n        return vol * audioDuckingFactor;\n      }\n\n      return vol;\n    },\n\n    paused() {\n      if (player.speakDescriptionsTTS) {\n        return player.speakDescriptionsTTS.paused();\n      }\n    },\n\n    callPlay() {\n      if (!player.speakDescriptionsTTS) {\n        return;\n      }\n\n      if (!player.speakDescriptionsTTS.extendedPlayerState_) {\n        player.speakDescriptionsTTS.extendedPlayerState_ = extendedPlayerState.unknown;\n      }\n\n      switch (player.speakDescriptionsTTS.extendedPlayerState_) {\n      case extendedPlayerState.unknown:\n      case extendedPlayerState.initialized:\n      case extendedPlayerState.paused:\n        player.speakDescriptionsTTS.extendedPlayerState_ = extendedPlayerState.playing;\n        player.speakDescriptionsTTS.play();\n        return;\n\n      case extendedPlayerState.pausedExtended:\n        player.speakDescriptionsTTS.extendedPlayerState_ = extendedPlayerState.playingExtended;\n        player.speakDescriptionsTTS.play();\n        return videojs.middleware.TERMINATOR;\n      }\n\n      return;\n    },\n\n    callPause() {\n      if (!player.speakDescriptionsTTS) {\n        return;\n      }\n\n      if (!player.speakDescriptionsTTS.extendedPlayerState_) {\n        player.speakDescriptionsTTS.extendedPlayerState_ = extendedPlayerState.unknown;\n      }\n\n      switch (player.speakDescriptionsTTS.extendedPlayerState_) {\n      case extendedPlayerState.unknown:\n      case extendedPlayerState.initialized:\n      case extendedPlayerState.playing:\n        player.speakDescriptionsTTS.extendedPlayerState_ = extendedPlayerState.paused;\n        player.speakDescriptionsTTS.pause();\n        return;\n\n      case extendedPlayerState.playingExtended:\n        player.speakDescriptionsTTS.extendedPlayerState_ = extendedPlayerState.pausedExtended;\n        player.speakDescriptionsTTS.pause();\n        return videojs.middleware.TERMINATOR;\n      }\n\n      return;\n    }\n  };\n};\n\n// Register the plugin with video.js.\nvideojs.use('*', speakDescriptionsTrack);\n\n// Include the version number.\nspeakDescriptionsTrack.VERSION = '__VERSION__';\n\nmodule.exports = speakDescriptionsTrack;\n"]}